<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd">
    <modelVersion>4.0.0</modelVersion>
    <parent>
        <groupId>org.springframework.boot</groupId>
        <artifactId>spring-boot-starter-parent</artifactId>
        <version>3.2.10</version>
        <relativePath/> <!-- lookup parent from repository -->
    </parent>
    <groupId>com.example</groupId>
    <artifactId>template</artifactId>
    <version>0.0.1-SNAPSHOT</version>
    <name>template</name>
    <description>springboot template</description>

    <properties>
        <java.version>17</java.version>
        <mybatis-plus.version>3.5.7</mybatis-plus.version>
        <pagehelper.version>2.1.0</pagehelper.version>
        <hutool.version>5.8.25</hutool.version>
        <sa-token.version>1.38.0</sa-token.version>
        <redisson.version>3.35.0</redisson.version>
        <knife4j.version>4.5.0</knife4j.version>
        <admin.version>2.7.15</admin.version>
        <tencent.cos.version>5.6.229</tencent.cos.version>
        <ali.oss.version>3.18.1</ali.oss.version>
        <shardingsphere.version>5.5.0</shardingsphere.version>
        <druid.starter.version>1.2.23</druid.starter.version>
    </properties>

    <dependencies>

        <!-- ========== 日志相关依赖 ========== -->
        <!-- Spring Boot Starter Log4j2，使用 Log4j2 作为日志记录框架 -->
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-log4j2</artifactId>
        </dependency>

        <!-- Spring Boot Starter，基础启动器，排除 Logback 和 log4j-to-slf4j 依赖 -->
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter</artifactId>
            <exclusions>
                <!-- 解决 log4j-slf4j2-impl 不能与 log4j-to-slf4j 共存的问题 -->
                <exclusion>
                    <groupId>org.apache.logging.log4j</groupId>
                    <artifactId>log4j-to-slf4j</artifactId>
                </exclusion>
                <!-- 排除 Logback 依赖，使用 Log4j2 -->
                <exclusion>
                    <groupId>ch.qos.logback</groupId>
                    <artifactId>logback-classic</artifactId>
                </exclusion>
            </exclusions>
        </dependency>
        <!-- ========== 日志相关依赖结束 ========== -->

        <!-- ========== 测试相关依赖 ========== -->
        <!-- Spring Boot Starter Test，提供测试功能支持 -->
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-test</artifactId>
            <scope>test</scope>
        </dependency>
        <!-- ========== 测试相关依赖结束 ========== -->

        <!-- ========== Web 相关依赖 ========== -->
        <!-- Spring Boot Starter Web，提供构建 Web 应用程序所需的基本功能 -->
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-web</artifactId>
        </dependency>

        <!-- Spring Boot Starter AOP，提供面向切面编程支持 -->
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-aop</artifactId>
        </dependency>
        <!-- ========== Web 相关依赖结束 ========== -->

        <!-- ========== 开发工具相关依赖 ========== -->
        <!-- Spring Boot DevTools，提供开发时的热重载功能 -->
        <!--        <dependency>-->
        <!--            <groupId>org.springframework.boot</groupId>-->
        <!--            <artifactId>spring-boot-devtools</artifactId>-->
        <!--            <scope>runtime</scope>-->
        <!--            <optional>false</optional>-->
        <!--        </dependency>-->

        <!-- Spring Boot Starter Actuator，提供应用程序监控和管理功能 -->
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-actuator</artifactId>
        </dependency>

        <!-- Spring Boot Starter Validation，提供数据校验功能 -->
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-validation</artifactId>
        </dependency>
        <!-- ========== 开发工具相关依赖结束 ========== -->

        <!-- ========== 缓存相关依赖 ========== -->
        <!-- Caffeine，Java 8 的高性能缓存库 -->
        <dependency>
            <groupId>com.github.ben-manes.caffeine</groupId>
            <artifactId>caffeine</artifactId>
        </dependency>
        <!-- ========== 缓存相关依赖结束 ========== -->

        <!-- ========== 数据库相关依赖 ========== -->
        <!-- MySQL Connector，MySQL 数据库的 JDBC 驱动 -->
        <dependency>
            <groupId>com.mysql</groupId>
            <artifactId>mysql-connector-j</artifactId>
            <scope>runtime</scope>
        </dependency>

        <!-- Lombok，简化 Java 代码中的 getter/setter 方法 -->
        <dependency>
            <groupId>org.projectlombok</groupId>
            <artifactId>lombok</artifactId>
            <optional>true</optional>
        </dependency>

        <!-- MyBatis-Plus，MyBatis 的增强工具，提供 CRUD 功能 -->
        <dependency>
            <groupId>com.baomidou</groupId>
            <artifactId>mybatis-plus-spring-boot3-starter</artifactId>
            <version>${mybatis-plus.version}</version>
        </dependency>

        <!-- PageHelper，MyBatis 的分页插件 -->
        <dependency>
            <groupId>com.github.pagehelper</groupId>
            <artifactId>pagehelper-spring-boot-starter</artifactId>
            <version>${pagehelper.version}</version>
        </dependency>

        <!-- Hutool，Java 工具库，提供多种常用工具方法 -->
        <dependency>
            <groupId>cn.hutool</groupId>
            <artifactId>hutool-all</artifactId>
            <version>${hutool.version}</version>
        </dependency>
        <!-- ========== 数据库相关依赖结束 ========== -->

        <!-- ========== Redis 相关依赖 ========== -->
        <!-- Sa-Token Redis，整合 Redis 的权限认证框架 -->
        <dependency>
            <groupId>cn.dev33</groupId>
            <artifactId>sa-token-redis-jackson</artifactId>
            <version>${sa-token.version}</version>
        </dependency>

        <!-- Sa-Token，基于注解的权限认证框架 -->
        <dependency>
            <groupId>cn.dev33</groupId>
            <artifactId>sa-token-spring-boot3-starter</artifactId>
            <version>${sa-token.version}</version>
        </dependency>

        <!-- Commons Pool2，提供 Redis 连接池支持 -->
        <dependency>
            <groupId>org.apache.commons</groupId>
            <artifactId>commons-pool2</artifactId>
        </dependency>

        <!-- Spring Boot Starter Data Redis，提供 Redis 数据访问支持 -->
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-data-redis</artifactId>
        </dependency>

        <!-- Redisson，Redis 客户端，提供高层封装 -->
        <dependency>
            <groupId>org.redisson</groupId>
            <artifactId>redisson-spring-boot-starter</artifactId>
            <version>${redisson.version}</version>
        </dependency>
        <!-- ========== Redis 相关依赖结束 ========== -->

        <!-- ========== API 文档相关依赖 ========== -->
        <!-- Knife4j，接口文档生成工具，支持 Swagger 和 OpenAPI -->
        <dependency>
            <groupId>com.github.xiaoymin</groupId>
            <artifactId>knife4j-openapi3-jakarta-spring-boot-starter</artifactId>
            <version>${knife4j.version}</version>
        </dependency>

        <!-- Spring Boot Admin，监控客户端 -->
        <dependency>
            <groupId>de.codecentric</groupId>
            <artifactId>spring-boot-admin-starter-client</artifactId>
            <version>${admin.version}</version>
        </dependency>
        <!-- ========== API 文档相关依赖结束 ========== -->

        <!-- ========== 网络通信相关依赖 ========== -->
        <!-- Netty，异步事件驱动网络应用程序框架 -->
        <dependency>
            <groupId>io.netty</groupId>
            <artifactId>netty-all</artifactId>
        </dependency>
        <!-- ========== 网络通信相关依赖结束 ========== -->

        <!-- ========== 分库分表相关依赖 ========== -->
        <!-- ShardingSphere，开源的分库分表中间件 -->
        <dependency>
            <groupId>org.apache.shardingsphere</groupId>
            <artifactId>shardingsphere-jdbc</artifactId>
            <version>${shardingsphere.version}</version>
            <exclusions>
                <exclusion>
                    <groupId>org.apache.shardingsphere</groupId>
                    <artifactId>shardingsphere-test-util</artifactId>
                </exclusion>
                <!-- 排除 Logback 依赖，使用 Log4j2 -->
                <exclusion>
                    <groupId>ch.qos.logback</groupId>
                    <artifactId>logback-classic</artifactId>
                </exclusion>
            </exclusions>
        </dependency>
        <!-- ========== 分库分表相关依赖结束 ========== -->

        <!-- ========== 数据库连接池相关依赖 ========== -->
        <!-- Druid，数据库连接池，提供监控与性能分析 -->
        <dependency>
            <groupId>com.alibaba</groupId>
            <artifactId>druid-spring-boot-3-starter</artifactId>
            <version>${druid.starter.version}</version>
        </dependency>
        <!-- ========== 数据库连接池相关依赖结束 ========== -->

        <!-- ========== 云存储相关依赖 ========== -->
        <!-- 腾讯云 COS，云对象存储服务 -->
        <dependency>
            <groupId>com.qcloud</groupId>
            <artifactId>cos_api</artifactId>
            <version>${tencent.cos.version}</version>
        </dependency>

        <!-- 阿里云 OSS，云对象存储服务 -->
        <dependency>
            <groupId>com.aliyun.oss</groupId>
            <artifactId>aliyun-sdk-oss</artifactId>
            <version>${ali.oss.version}</version>
        </dependency>
        <!-- ========== 云存储相关依赖结束 ========== -->

    </dependencies>


    <!-- 项目构建概况 -->
    <build>
        <finalName>${project.artifactId}-${project.version}-${spring.profiles.active}</finalName>
        <!-- 构建插件 -->
        <plugins>
            <!-- maven 打包 -->
            <plugin>
                <groupId>org.springframework.boot</groupId>
                <artifactId>spring-boot-maven-plugin</artifactId>
                <configuration>
                    <!-- 指定应用程序的入口类 -->
                    <mainClass>com.example.template.TemplateApplication</mainClass>
                    <!-- 指定打包的布局类型为 JAR -->
                    <layout>JAR</layout>
                    <!-- 生成可执行的 JAR 文件 -->
                    <executable>true</executable>
                    <!-- 添加资源到 JAR 文件中 -->
                    <addResources>true</addResources>
                </configuration>
                <executions>
                    <execution>
                        <goals>
                            <goal>repackage</goal>
                        </goals>
                    </execution>
                </executions>
            </plugin>
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-compiler-plugin</artifactId>
                <configuration>
                    <source>${java.version}</source>
                    <target>${java.version}</target>
                    <encoding>UTF-8</encoding>
                </configuration>
            </plugin>
        </plugins>

        <resources>
            <!-- 单个资源配置，用于加载特定配置文件 -->
            <resource>
                <directory>src/main/resources</directory> <!-- 指定资源目录 -->
                <includes>
                    <!-- 定义根据活跃的Spring配置文件加载相应的数据库配置 -->
                    <include>mysql/mysql-${spring.profiles.active}.yaml</include>
                    <!-- 定义根据活跃的Spring配置文件加载相应的应用配置 -->
                    <include>application-${spring.profiles.active}.yaml</include>
                    <!-- 加载通用的应用配置文件 -->
                    <include>application.yaml</include>
                </includes>
                <!-- 启用过滤，允许使用Spring配置文件中的占位符进行动态配置 -->
                <filtering>true</filtering>
            </resource>
            <!-- 单个资源配置，用于加载一系列开发过程中需要的资源文件 -->
            <resource>
                <directory>src/main/resources</directory> <!-- 指定资源目录 -->
                <includes>
                    <!-- 包含MyBatis映射文件 -->
                    <include>mapper/**</include>
                    <!-- 包含启动标识文件 -->
                    <include>banner.txt</include>
                    <!-- 包含其他配置文件 -->
                    <include>log4j2/**</include>
                    <include>redis/**</include>
                </includes>
                <!-- 禁用过滤，保留文件原始内容，不进行占位符替换 -->
                <filtering>false</filtering>
            </resource>
        </resources>
    </build>

    <!-- 多环境打包 -->
    <profiles>
        <profile>
            <id>dev</id>
            <!-- 默认激活dev环境-->
            <activation>
                <activeByDefault>true</activeByDefault>
            </activation>
            <properties>
                <spring.profiles.active>dev</spring.profiles.active>
                <maven.test.skip>true</maven.test.skip>
            </properties>
        </profile>
        <profile>
            <id>prod</id>
            <!--<activation>-->
            <!--    <activeByDefault>true</activeByDefault>-->
            <!--</activation>-->
            <properties>
                <spring.profiles.active>prod</spring.profiles.active>
                <maven.test.skip>true</maven.test.skip>
            </properties>
        </profile>
    </profiles>

    <!-- 指定依赖仓库 -->
    <repositories>
        <repository>
            <id>public</id>
            <name>ALiCloud maven</name>
            <url>https://maven.aliyun.com/nexus/content/groups/public/</url>
            <releases>
                <enabled>true</enabled>
            </releases>
        </repository>
    </repositories>

    <!-- 指定插件仓库 -->
    <pluginRepositories>
        <pluginRepository>
            <id>public</id>
            <name>aliyun maven</name>
            <url>https://maven.aliyun.com/nexus/content/groups/public/</url>
            <releases>
                <enabled>true</enabled>
            </releases>
            <snapshots>
                <enabled>false</enabled>
            </snapshots>
        </pluginRepository>
    </pluginRepositories>

</project>
