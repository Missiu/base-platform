<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd">
    <modelVersion>4.0.0</modelVersion>
    <parent>
        <groupId>org.springframework.boot</groupId>
        <artifactId>spring-boot-starter-parent</artifactId>
        <version>3.2.10</version>
        <relativePath/> <!-- lookup parent from repository -->
    </parent>
    <groupId>com.example</groupId>
    <artifactId>template</artifactId>
    <version>0.0.1-SNAPSHOT</version>
    <name>template</name>
    <description>springboot template</description>

    <properties>
        <java.version>17</java.version>
        <mybatis-plus.version>3.5.7</mybatis-plus.version>
        <hutool.version>5.8.25</hutool.version>
        <sa-token.version>1.38.0</sa-token.version>
        <redisson.version>3.35.0</redisson.version>
        <knife4j.version>4.5.0</knife4j.version>
        <admin.version>2.7.15</admin.version>
        <tencent.cos.version>5.6.229</tencent.cos.version>
        <ali.oss.version>3.18.1</ali.oss.version>
        <shardingsphere.version>5.5.0</shardingsphere.version>
        <druid.starter.version>1.2.23</druid.starter.version>
    </properties>

    <dependencies>
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-log4j2</artifactId>
        </dependency>
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter</artifactId>
            <exclusions>
                <!--解决 log4j-slf4j2-impl cannot be present with log4j-to-slf4j-->
                <exclusion>
                    <groupId>org.apache.logging.log4j</groupId>
                    <artifactId>log4j-to-slf4j</artifactId>
                </exclusion>
                <!-- 排除logback依赖 使用log4j2-->
                <exclusion>
                    <groupId>ch.qos.logback</groupId>
                    <artifactId>logback-classic</artifactId>
                </exclusion>
            </exclusions>
        </dependency>

        <!--test 依赖-->
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-test</artifactId>
            <scope>test</scope>
        </dependency>

        <!--web 依赖-->
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-web</artifactId>
        </dependency>

        <!--aop 依赖-->
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-aop</artifactId>
        </dependency>

        <!--devtools 依赖-->
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-devtools</artifactId>
            <scope>runtime</scope>
            <optional>true</optional>
        </dependency>

        <!--actuator 依赖 监控 -->
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-actuator</artifactId>
        </dependency>

        <!-- Caffeine 依赖配置 -->
        <dependency>
            <groupId>com.github.ben-manes.caffeine</groupId>
            <artifactId>caffeine</artifactId>
        </dependency>

        <!--mysql 依赖-->
        <dependency>
            <groupId>com.mysql</groupId>
            <artifactId>mysql-connector-j</artifactId>
            <scope>runtime</scope>
        </dependency>

        <!--lombok 依赖 提供注解-->
        <dependency>
            <groupId>org.projectlombok</groupId>
            <artifactId>lombok</artifactId>
            <optional>true</optional>
        </dependency>

        <!--mybatis-plus 依赖 对mybatis的增强 -->
        <dependency>
            <groupId>com.baomidou</groupId>
            <artifactId>mybatis-plus-spring-boot3-starter</artifactId>
            <version>${mybatis-plus.version}</version>
        </dependency>
        <!--hutool 依赖 提供工具类-->
        <dependency>
            <groupId>cn.hutool</groupId>
            <artifactId>hutool-all</artifactId>
            <version>${hutool.version}</version>
        </dependency>

        <!-- sa-token 依赖 整合redis (使用jackson序列化方式） -->
        <dependency>
            <groupId>cn.dev33</groupId>
            <artifactId>sa-token-redis-jackson</artifactId>
            <version>${sa-token.version}</version>
        </dependency>

        <!-- sa-token 依赖 sa-token权限认证框架 -->
        <dependency>
            <groupId>cn.dev33</groupId>
            <artifactId>sa-token-spring-boot3-starter</artifactId>
            <version>${sa-token.version}</version>
        </dependency>

        <!-- commons-pool2 依赖 提供Redis连接池 -->
        <dependency>
            <groupId>org.apache.commons</groupId>
            <artifactId>commons-pool2</artifactId>
        </dependency>

        <!--redis 依赖-->
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-data-redis</artifactId>
        </dependency>

        <!-- Redisson 依赖配置 -->
        <dependency>
            <groupId>org.redisson</groupId>
            <artifactId>redisson-spring-boot-starter</artifactId>
            <version>${redisson.version}</version>
        </dependency>

        <!-- knife4j 依赖 接口文档 -->
        <dependency>
            <groupId>com.github.xiaoymin</groupId>
            <artifactId>knife4j-openapi3-jakarta-spring-boot-starter</artifactId>
            <version>${knife4j.version}</version>
        </dependency>

        <!--admin 依赖 监控 client -->
        <dependency>
            <groupId>de.codecentric</groupId>
            <artifactId>spring-boot-admin-starter-client</artifactId>
            <version>${admin.version}</version>
        </dependency>

        <!-- Netty 依赖 网络通信 -->
        <dependency>
            <groupId>io.netty</groupId>
            <artifactId>netty-all</artifactId>
        </dependency>

        <!--shardingsphere 依赖 分库分表 -->
        <dependency>
            <groupId>org.apache.shardingsphere</groupId>
            <artifactId>shardingsphere-jdbc</artifactId>
            <version>${shardingsphere.version}</version>
            <exclusions>
                <exclusion>
                    <groupId>org.apache.shardingsphere</groupId>
                    <artifactId>shardingsphere-test-util</artifactId>
                </exclusion>
                <!-- 排除logback依赖 使用log4j2-->
                <exclusion>
                    <groupId>ch.qos.logback</groupId>
                    <artifactId>logback-classic</artifactId>
                </exclusion>
            </exclusions>
        </dependency>

        <!--druid 依赖 数据库连接池 -->
        <dependency>
            <groupId>com.alibaba</groupId>
            <artifactId>druid-spring-boot-3-starter</artifactId>
            <version>${druid.starter.version}</version>
        </dependency>

        <!--腾讯云cos 依赖-->
        <dependency>
            <groupId>com.qcloud</groupId>
            <artifactId>cos_api</artifactId>
            <version>${tencent.cos.version}</version>
        </dependency>

        <!-- 阿里云 OSS 依赖配置 -->
        <dependency>
            <groupId>com.aliyun.oss</groupId>
            <artifactId>aliyun-sdk-oss</artifactId>
            <version>${ali.oss.version}</version>
        </dependency>
    </dependencies>


    <!-- 项目构建概况 -->
    <build>
        <finalName>${project.artifactId}-${project.version}-${spring.profiles.active}</finalName>
        <!-- 构建插件 -->
        <plugins>
            <!-- maven 打包 -->
            <plugin>
                <groupId>org.springframework.boot</groupId>
                <artifactId>spring-boot-maven-plugin</artifactId>
                <configuration>
                    <!-- 指定应用程序的入口类 -->
                    <mainClass>com.example.template.TemplateApplication</mainClass>
                    <!-- 指定打包的布局类型为 JAR -->
                    <layout>JAR</layout>
                    <!-- 生成可执行的 JAR 文件 -->
                    <executable>true</executable>
                    <!-- 添加资源到 JAR 文件中 -->
                    <addResources>true</addResources>
                </configuration>
                <executions>
                    <execution>
                        <goals>
                            <goal>repackage</goal>
                        </goals>
                    </execution>
                </executions>
            </plugin>
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-compiler-plugin</artifactId>
                <configuration>
                    <source>${java.version}</source>
                    <target>${java.version}</target>
                    <encoding>UTF-8</encoding>
                </configuration>
            </plugin>
        </plugins>

        <resources>
            <!-- 单个资源配置，用于加载特定配置文件 -->
            <resource>
                <directory>src/main/resources</directory> <!-- 指定资源目录 -->
                <includes>
                    <!-- 定义根据活跃的Spring配置文件加载相应的数据库配置 -->
                    <include>mysql/mysql-${spring.profiles.active}.yaml</include>
                    <!-- 定义根据活跃的Spring配置文件加载相应的应用配置 -->
                    <include>application-${spring.profiles.active}.yaml</include>
                    <!-- 加载通用的应用配置文件 -->
                    <include>application.yaml</include>
                </includes>
                <!-- 启用过滤，允许使用Spring配置文件中的占位符进行动态配置 -->
                <filtering>true</filtering>
            </resource>
            <!-- 单个资源配置，用于加载一系列开发过程中需要的资源文件 -->
            <resource>
                <directory>src/main/resources</directory> <!-- 指定资源目录 -->
                <includes>
                    <!-- 包含MyBatis映射文件 -->
                    <include>mapper/**</include>
                    <!-- 包含启动标识文件 -->
                    <include>banner.txt</include>
                    <!-- 包含其他配置文件 -->
                    <include>log4j2/**</include>
                    <include>redis/**</include>
                </includes>
                <!-- 禁用过滤，保留文件原始内容，不进行占位符替换 -->
                <filtering>false</filtering>
            </resource>
        </resources>
    </build>

    <!-- 多环境打包 -->
    <profiles>
        <profile>
            <id>dev</id>
            <!-- 默认激活dev环境-->
            <activation>
                <activeByDefault>true</activeByDefault>
            </activation>
            <properties>
                <spring.profiles.active>dev</spring.profiles.active>
                <maven.test.skip>true</maven.test.skip>
            </properties>
        </profile>
        <profile>
            <id>prod</id>
            <!--<activation>-->
            <!--    <activeByDefault>true</activeByDefault>-->
            <!--</activation>-->
            <properties>
                <spring.profiles.active>prod</spring.profiles.active>
                <maven.test.skip>true</maven.test.skip>
            </properties>
        </profile>
    </profiles>

    <!-- 指定依赖仓库 -->
    <repositories>
        <repository>
            <id>public</id>
            <name>ALiCloud maven</name>
            <url>https://maven.aliyun.com/nexus/content/groups/public/</url>
            <releases>
                <enabled>true</enabled>
            </releases>
        </repository>
    </repositories>

    <!-- 指定插件仓库 -->
    <pluginRepositories>
        <pluginRepository>
            <id>public</id>
            <name>aliyun maven</name>
            <url>https://maven.aliyun.com/nexus/content/groups/public/</url>
            <releases>
                <enabled>true</enabled>
            </releases>
            <snapshots>
                <enabled>false</enabled>
            </snapshots>
        </pluginRepository>
    </pluginRepositories>

</project>
