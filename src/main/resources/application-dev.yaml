# 服务概况 ---- 可自定义
server:
  # 项目端口
  port: 8888
  # 类似http://127.0.0.1这样的格式，这里仅做一个记录
  domain: http://127.0.0.1
  servlet:
    # 项目基础URI
    context-path: /api
  # 开启Http2，使其能够进行多路复用
  http2:
    enabled: true
  # 选择Undertow服务器配置
  # todo 选择服务器 undertow和tomcat只能选择一个（预先关闭undertow）
  # 注意：如果使用Undertow，需要在pom.xml中引入undertow-core依赖
  undertow:
    # HTTP post内容的最大大小。当值为-1时，默认值为大小是无限的
    max-http-post-size: -1
    # Undertow的URI编码
    url-charset: UTF-8
    # 以下的配置会影响buffer,这些buffer会用于服务器连接的IO操作,有点类似netty的池化内存管理
    # 每块buffer的空间大小,越小的空间被利用越充分
    buffer-size: 512
    # 是否分配的直接内存
    direct-buffers: true
    threads:
      # 设置IO线程数, 它主要执行非阻塞的任务,它们会负责多个连接, 默认设置每个CPU核心一个线程
      io: 16
      # 阻塞任务线程池, 当执行类似servlet请求阻塞操作, Undertow会从这个线程池中取得线程,它的值设置取决于系统的负载
      worker: 256
  # 选择Tomcat服务器配置 (默认配置)
  tomcat:
    # Tomcat的URI编码
    uri-encoding: UTF-8
    # 连接数满后的排队数，默认为100
    accept-count: 1000
    threads:
      # Tomcat最大线程数，默认为200
      max: 800
      # Tomcat启动初始化的线程数，默认值10
      min-spare: 100


# 公共配置文件
spring:
  # 项目前置工作 ---- 可自定义
  application:
    # 定义项目名称
    name: spring-boot-init-template
  # 项目启动 Banner 设置
  banner:
    # Banner 编码
    charset: UTF-8
    # Banner 路径
    location: classpath:banner.txt
  # 文件上传 ---- 可自定义
  servlet:
    multipart:
      # 单个文件大小
      max-file-size: 12MB
      # 设置总上传的文件大小
      max-request-size: 20MB
  config:
    import: classpath:rabbitmq-config.yaml
  # 定时任务配置
  pool:
    # 线程池配置
    scheduled:
      # 核心线程数
      core-size: 10
    async:
      # 核心线程数
      core-size: 10
      # 最大线程数
      max-size: 20
      # 队列容量
      queue-capacity: 50
      #  线程名称前缀
      thread-name-prefix: async-pool-
    custom:
      core-size: 10
      keep-alive-time: 10
      max-size: 20
      queue-capacity: 50
      thread-name-prefix: custom-pool-
  # 邮件配置
  mail:
    # smtp服务器主机（163的）
    host: smtp.163.com
    # 连接邮件服务器端口(默认SMTP 25 POP 110)
    port: 25
    # 登录服务器邮箱账号
    username: 15775278810@163.com
    # 发送邮件的邮箱验证密码或者授权码
    password: SFMJOJSOLQLDHOYZ
    # 邮件默认编码
    default-encoding: UTF-8
    # 服务协议SMTP（代表是发送邮件）
    protocol: smtp
    properties:
      # 默认发送方邮箱账号（当程序未指定发件人邮箱则默认取这个）
      mail.smtp.from: 15775278810@163.com
      # 开启权限认证
      mail.smtp.auth: true
      # 连接时间的限制
      mail.smtp.connectiontimeout: 60000
      # 邮件接收时间的限制
      mail.smtp.timeout: 60000
      #  邮件发送时间的限制（毫秒）
      mail.smtp.writetimeout: 60000
      # 日志打印，邮件发送过程的日志会被输出
      mail.debug: false
      # 最大附件大小 50M
      mail.attachment.size.limit: 52428800
      # 最大图片大小 5M
      mail.image.size.limit: 5242880
      # 图片类型
      mail.image.types: jpg,jpeg,png,gif,bmp

  rabbitmq:
    # 单机 RabbitMQ IP（单价模式配置和集群模式配置只能存在一个）
    host: 127.0.0.1
    # 单机 RabbitMQ 端口
    port: 5672
    # 集群RabbitMQ（单价模式配置和集群模式配置只能存在一个）
    #addresses: 127.0.0.1:5672,127.0.0.1:5673,127.0.0.1:5674
    # 虚拟主机
    virtual-host: /
    # 用户名
    username: guest
    # 密码
    password: guest

    # 消息确认（ACK）
    publisher-confirm-type: correlated #确认消息已发送到交换机(Exchange)
    publisher-returns: true #确认消息已发送到队列(Queue)
#    设置开启Mandatory,才能触发回调函数,无论消息推送结果怎么样都强制调用回调函数(设置消息进入交换机后未被队列接收的消息不被丢弃由broker保存,false为丢弃)
    template:
      mandatory: true
      receive-timeout: 30000
      reply-timeout:  30000
    #      ReceiveTimeout
    # 是否手动ACK
    listener:
      type: simple
      direct:
        acknowledge-mode: manual
      simple:
        acknowledge-mode: manual
  # Redis配置
  data:
    redis:
      database: 2
      host: 127.0.0.1
      port: 6379
      password: huzhihao
      timeout: 10000

      lettuce:
        pool:
          enabled: true
          max-active: 8
          max-idle: 8
          max-wait: -1ms
          min-idle: 0
          time-between-eviction-runs: 10m
      #      cluster:
#        max-redirects: 3
#        nodes:
#          - 127.0.0.1:7000
#          - 127.0.0.1:7001
#          - 127.0.0.1:7002
#          - 127.0.0.1:7003
#          - 127.0.0.1:7004
#          - 127.0.0.1:7005
      jedis:
        pool:
          max-active: 8
          max-idle: 8
          max-wait: -1ms
          min-idle: 0
          time-between-eviction-runs: 10m
          enabled: false
      client-type: lettuce



  # MySQL配置
  datasource:
    driver-class-name: org.apache.shardingsphere.driver.ShardingSphereDriver
    url: jdbc:shardingsphere:classpath:mysql/mysql-@spring.profiles.active@.yaml
    # druid 连接池管理
    druid:
      # 数据库类型
      db-type: mysql
      # 初始化时建立物理连接的个数
      initial-size: 5
      # 连接池的最小空闲数量
      min-idle: 5
      # 连接池最大连接数量
      max-active: 20
      # 获取连接时最大等待时间，单位毫秒
      max-wait: 60000
      # 申请连接的时候检测，如果空闲时间大于timeBetweenEvictionRunsMillis，执行validationQuery检测连接是否有效。
      test-while-idle: true
      # 既作为检测的间隔时间又作为testWhileIdel执行的依据
      time-between-eviction-runs-millis: 60000
      # 销毁线程时检测当前连接的最后活动时间和当前时间差大于该值时，关闭当前连接(配置连接在池中的最小生存时间)
      min-evictable-idle-time-millis: 30000
      # 用来检测数据库连接是否有效的sql 必须是一个查询语句(oracle中为 select 1 from dual)
      validation-query: select 'x'
      # 申请连接时会执行validationQuery检测连接是否有效,开启会降低性能,默认为true
      test-on-borrow: false
      # 归还连接时会执行validationQuery检测连接是否有效,开启会降低性能,默认为true
      test-on-return: false
      # 是否缓存preparedStatement, 也就是PSCache,PSCache对支持游标的数据库性能提升巨大，比如说oracle,在mysql下建议关闭。
      pool-prepared-statements: false
      # 置监控统计拦截的filters，去掉后监控界面sql无法统计，stat: 监控统计、Slf4j:日志记录、waLL: 防御sqL注入
      filters: stat,wall,slf4j
      # 要启用PSCache，必须配置大于0，当大于0时，poolPreparedStatements自动触发修改为true。在Druid中，不会存在Oracle下PSCache占用内存过多的问题，可以把这个数值配置大一些，比如说100
      max-pool-prepared-statement-per-connection-size: -1
      # 合并多个DruidDataSource的监控数据
      use-global-data-source-stat: true
      # 通过connectProperties属性来打开mergeSql功能；慢SQL记录
      connect-properties: druid.stat.mergeSql=true;druid.stat.slowSqlMillis=5000

      web-stat-filter:
        # 是否启用StatFilter默认值true
        enabled: true
        # 添加过滤规则
        url-pattern: /*
        # 忽略过滤的格式
        exclusions: /druid/*,*.js,*.gif,*.jpg,*.png,*.css,*.ico

      stat-view-servlet:
        # 是否启用StatViewServlet默认值true
        enabled: true
        # 访问路径为/druid时，跳转到StatViewServlet
        url-pattern: /druid/*
        # 是否能够重置数据
        reset-enable: false
        # 需要账号密码才能访问控制台，默认为root
        login-username: root
        login-password: password
        # IP白名单
        allow: 127.0.0.1
        # IP黑名单（共同存在时，deny优先于allow）
        deny:

# 日志配置
logging:
  config: classpath:log4j2/log4j2-@spring.profiles.active@.xml

# Knife4j的增强配置，不需要增强可以不配
knife4j:
  # 是否打开Knife4j的增强配置
  enable: true
  # todo 是否开启生产环境保护（由于拿到模板就需要二次开发，所以默认开发环境，即预先关闭）
  production: false
  setting:
    language: zh-CN
    enable-footer: true
    enable-footer-custom: true
    footer-custom-content: Apache License 2.0 | Copyright &copy; 2024 [Hu](https://github.com/Missiu)
    enable-home-custom: true
  # Basic验证
  basic:
    # todo 是否让页面带有Basic验证（如果只是查看api推荐打开，但是如果要在里面调试，推荐关闭，因为basic验证之后会占用请求头的Authorization字段，会导致需要登录验证的接口调用失败，预先关闭）
    enable: false
    # 登录用户名
    username: admin
    password: admin123456
# SpringDoc-OpenAPI项目配置
springdoc:
  api-docs:
    path: /v3/api-docs
    version: openapi_3_1
  swagger-ui:
    path: /swagger-ui.html
  group-configs:
    - group: "template"
      paths-to-match: "/**"
      packages-to-scan:
        - com.example.template.module.controller

# MyBatisPlus配置
# https://baomidou.com/config/
mybatis-plus:
  # 启动时是否检查 MyBatis XML 文件的存在，默认不检查
  check-config-location: true
  # 对应的 XML 文件位置
  mapper-locations: classpath:mapper/**.xml
  # 实体扫描，多个package用逗号或者分号分隔
  type-aliases-package: com.example.template.module.domain.entity
  configuration:
    # 自动驼峰命名规则（camel case）映射
    map-underscore-to-camel-case: true
    # MyBatis 自动映射策略
    # NONE 不启用；PARTIAL 只对非嵌套 resultMap 自动映射；FULL 对所有 resultMap 自动映射；
    auto-mapping-behavior: FULL
    # MyBatis 自动映射时未知列或未知属性处理策
    # NONE 不做处理； WARNING 打印相关警告；FAILING 抛出异常和详细信息；
    # 做了统一异常管理
    auto-mapping-unknown-column-behavior: NONE
    # 更详细的日志输出 会有性能损耗 org.apache.ibatis.logging.stdout.StdOutImpl
    # 关闭日志记录 (可单纯使用 p6spy 分析) org.apache.ibatis.logging.nologging.NoLoggingImpl
    # 默认日志输出 org.apache.ibatis.logging.slf4j.Slf4jImpl
    log-impl: org.apache.ibatis.logging.slf4j.Slf4jImpl
    # 二级缓存配置
    # cache-enabled: true
  global-config:
    # 是否打印 Logo banner
    banner: false
    db-config:
      # 主键类型
      # AUTO 自增；NONE 空；INPUT 用户输入；ASSIGN_ID 雪花算法；ASSIGN_UUID 排除中划线的UUID；UUID 普通的UUID；
      id-type: ASSIGN_ID
      # 逻辑删除的字段
      logic-delete-field: is_deleted
      # 逻辑已删除值
      logic-delete-value: 1
      # 逻辑未删除值
      logic-not-delete-value: 0
      # 插入策略，确保插入操作中的字段不为null
      insert-strategy: not_null
      # 更新策略，确保更新操作中的字段不为null
      update-strategy: not_null
      # 查询策略，确保查询操作中的条件字段不为null
      where-strategy: not_null

# Caffeine本地缓存配置
caffeine:
  # todo 是否启动（预先关闭）
  enable: true
  # 最后一次写入或访问后经过固定时间过期，单位：秒
  expired: 1800
  # 缓存初始容量
  init-capacity: 256
  # 缓存最大容量，超过之后会按照最近最少策略进行缓存剔除
  max-capacity: 10000
  # 是否允许空值null作为缓存的value
  allow-null-value: true

# 业务缓存Redisson配置（这里的Redisson配置主要用来系统业务逻辑的缓存服务，要求Redis版本在7.0以上）
# 如果同时开启单机版本和集群版本，只有单机版本生效
redisson:
  # 线程池数量
  threads: 4
  # Netty线程池数量
  netty-threads: 8
  # Redis单机版本
  single-server-config:
    # todo 是否启动单机Redis（Redisson）缓存（预先关闭）
    enable-single: true
    # 单机地址（一定要在redis协议下）
    address: redis://127.0.0.1:6379
    # 数据库索引
    database: 3
    # 密码（考虑是否需要密码）
    password: huzhihao
    # 命令等待超时，单位：毫秒
    timeout: 3000
    # 发布和订阅连接池大小
    subscription-connection-pool-size: 25
    # 最小空闲连接数
    connection-minimum-idle-size: 8
    # 连接池大小
    connection-pool-size: 32
    # 连接空闲超时，单位：毫秒
    idle-connection-timeout: 10000
  # Redis集群版本
  cluster-servers-config:
    # todo 是否启动集群Redis（Redisson）缓存（预先关闭）
    enable-cluster: false
    # Redis集群节点（一定要在Redis协议下）
    node-addresses:
      - redis://127.0.0.1:6379
      - redis://127.0.0.1:6380
      - redis://127.0.0.1:6381
      - redis://127.0.0.1:6382
      - redis://127.0.0.1:6383
      - redis://127.0.0.1:6384
    # 密码（考虑是否需要密码）
    #password: 123456
    # master最小空闲连接数
    master-connection-minimum-idleSize: 16
    # master连接池大小
    master-connection-pool-size: 32
    # slave最小空闲连接数
    slave-connection-minimum-idle-size: 16
    # slave连接池大小
    slave-connection-pool-size: 32
    # 连接空闲超时，单位：毫秒
    idle-connection-timeout: 10000
    # 命令等待超时，单位：毫秒
    timeout: 3000
    # 发布和订阅连接池大小
    subscription-connection-pool-size: 25

encrypt:
  # 盐值长度
  salt-length: 16
  # 迭代次数
  hash-iterations: 1000
  # RSA密钥生成长度 必须是512的倍数，且不小于512，推荐2048或4096
  key-size: 2048

# Sa-Token配置
sa-token:
  # token名称 (同时也是cookie名称)
  token-name: SA-TOKEN
  # token有效期 设为一天 (必定过期) 单位: 秒
  timeout: 86400
  # 多端不同 token 有效期 可查看 LoginHelper.loginByDevice 方法自定义
  # token最低活跃时间 (指定时间无操作就过期) 单位: 秒
  active-timeout: 1800
  # Same-Token的有效期 (单位: 秒)(默认一天）
  #same-token-timeout: 600
  # 是否允许同一账号并发登录 (为true时允许一起登录, 为false时新登录挤掉旧登录)
  is-concurrent: false
  # 在多人登录同一账号时，是否共用一个 token (为 true 时所有登录共用一个 token , 为 false 时每次登录新建一个 token)
  # 使用 jwt-simple 模式后，is-share=false 恒等于 false。
  is-share: false
  # todo 鉴权模式说明：
  # 1.is-read-cookie=true; is-read-header==>false; token-prefix=null;   ==> 标准的 Session + Cookie 模式（推荐）
  # 2.is-read-cookie=false; is-read-header==>true; token-prefix=exist;
  #   is-read-cookie=false; is-read-header==>true; token-prefix=null;   ==> 标准的 Redis + JWT 模式（推荐）
  # 3.is-read-cookie=true; is-read-header==>true; token-prefix=null;    ==> Session + Cookie 模式和 Redis + JWT 模式共存，两者均能实现鉴权（推荐，模板默认模式）
  # 4.is-read-cookie=true; is-read-header==>true; token-prefix=exist;   ==> 仅有 Redis + JWT 模式起作用，作用等同于标准的 Redis + JWT 模式
  # 5.is-read-cookie=false; is-read-header==>false; token-prefix=null;
  #   is-read-cookie=false; is-read-header==>false; token-prefix=exist; ==> 无法通过鉴权模式
  # 鉴权模式一：Session + Cookie（Token 由 Cookie 自动传递），如果为 false ，那么前端 Cookie 不会自动填充 Token
  is-read-cookie: true
  # 鉴权模式二：Redis + JWT（Token 由 Header 手动传递），如果为 true ，正常的实现逻辑应该是将 Token 从登录接口返回给前端，前端存储之后每次发起请求都将 Token 放入 Header 中
  is-read-header: true
  # 在鉴权模式二下，Token 的前缀（这个需要手动添加并从 Header 中传入进来）
  #token-prefix: "Bearer"
  # jwt秘钥
  jwt-secret-key: template
  # 开启日志
  is-log: on
  # 非jwt形式的token风格：uuid 带有中划线的uuid（默认）；simple-uuid 不带有中划线的uuid；random-32 随机32位字符串；random-64 随机64位字符串；random-128 随机128位字符串；tik tik风格。
  token-style: uuid

# pagehelper配置
pagehelper:
  helper-dialect: mysql
  # 分页合理化参数默认false，当该参数设置为true 时，pageNum <= 0 时，默认显示第一页，pageNum 超过 pageSize 时，显示最后一页
  reasonable: true
  # 分页插件会根据查询方法的参数中，自动根据params 配置的字段中取值，找到合适的值会自动分页。　
  support-methods-arguments: false
  # 用于从对象中根据属性名取值，可以配置pageNum，pageSize，count 不用配置映射的默认值。
  params: countSql




sms:
  # 启用或禁用该配置项
  enable: true
  # 模板代码，用于指定消息的格式和内容
  template-code: xxxxxxx
  # 访问密钥ID，用于身份验证
  access-key-id: xxxxxxx
  # 访问密钥密钥，用于身份验证
  access-key-secret: xxxxxxx
  # 地域ID，用于指定服务区域
  region-id: cn-hongkong
  # 终端节点，用于指定服务访问地址
  # Endpoint 请参考 https://api.aliyun.com/product/Dysmsapi
  endpoint: dysmsapi.aliyuncs.com
  # 短信签名名称，用于标识发送方
  sign-name: 阿里云短信测试

oss:
  # 腾讯云COS配置
  tencent:
    # todo 是否开启（预先关闭）
    enable: false
    # 地域
    region: ap-xxxxxxxx
    # 用户的 SecretId，建议使用子账号密钥，授权遵循最小权限指引，降低使用风险。子账号密钥获取可参见 https://cloud.tencent.com/document/product/598/37140
    secret-id: xxxxxxxx
    # 用户的 SecretKey，建议使用子账号密钥，授权遵循最小权限指引，降低使用风险。子账号密钥获取可参见 https://cloud.tencent.com/document/product/598/37140
    secret-key: xxxxxxxx
    # 桶名称
    bucket-name: xxxxxxxx
  # 阿里云OSS配置
  ali:
    # todo 是否开启（预先关闭）
    enable: false
    # 域名 以华东1（杭州）为例，Endpoint填写为https://oss-cn-hangzhou.aliyuncs.com。
    endpoint: https://oss-xx-xxx.aliyuncs.com
    # 用户的 SecretId
    secret-id: xxxxxxxx
    # 用户的 SecretKey
    secret-key: xxxxxxxx
    # 桶名称
    bucket-name: xxxxxxxx


